// Generated by `wit-bindgen` 0.26.0. DO NOT EDIT!
package wit.imports.kinode.process;

import java.nio.charset.StandardCharsets;
import java.util.ArrayList;

import org.teavm.interop.Memory;
import org.teavm.interop.Address;
import org.teavm.interop.Import;
import org.teavm.interop.Export;

public final class Standard{
    private Standard() {}
    
    public static final class ProcessId {
        public final String processName;
        public final String packageName;
        public final String publisherNode;
        
        public ProcessId(String processName, String packageName, String publisherNode) {
            this.processName = processName;
            this.packageName = packageName;
            this.publisherNode = publisherNode;
        }
    }
    
    public static final class PackageId {
        public final String packageName;
        public final String publisherNode;
        
        public PackageId(String packageName, String publisherNode) {
            this.packageName = packageName;
            this.publisherNode = publisherNode;
        }
    }
    
    public static final class Address {
        public final String node;
        public final ProcessId process;
        
        public Address(String node, ProcessId process) {
            this.node = node;
            this.process = process;
        }
    }
    
    public static final class LazyLoadBlob {
        public final String mime;
        public final byte[] bytes;
        
        public LazyLoadBlob(String mime, byte[] bytes) {
            this.mime = mime;
            this.bytes = bytes;
        }
    }
    
    public static final class Capability {
        public final Address issuer;
        public final String params;
        
        public Capability(Address issuer, String params) {
            this.issuer = issuer;
            this.params = params;
        }
    }
    
    public static final class Request {
        public final boolean inherit;
        public final Long expectsResponse;
        public final byte[] body;
        public final String metadata;
        public final ArrayList<Capability> capabilities;
        
        public Request(boolean inherit, Long expectsResponse, byte[] body, String metadata, ArrayList<Capability> capabilities) {
            this.inherit = inherit;
            this.expectsResponse = expectsResponse;
            this.body = body;
            this.metadata = metadata;
            this.capabilities = capabilities;
        }
    }
    
    public static final class Response {
        public final boolean inherit;
        public final byte[] body;
        public final String metadata;
        public final ArrayList<Capability> capabilities;
        
        public Response(boolean inherit, byte[] body, String metadata, ArrayList<Capability> capabilities) {
            this.inherit = inherit;
            this.body = body;
            this.metadata = metadata;
            this.capabilities = capabilities;
        }
    }
    
    /**
    * A message can be a request or a response. within a response, there is
    * a result which surfaces any error that happened because of a request.
    * A successful response will contain the context of the request it
    * matches, if any was set.
    */
    
    public static final class Message {
        public final byte tag;
        private final Object value;
        
        private Message(byte tag, Object value) {
            this.tag = tag;
            this.value = value;
        }
        
        public static Message request(Request request) {
            return new Message(REQUEST, request);
        }
        
        public static Message response(wit.worlds.ProcessV0.Tuple2<Response, byte[]> response) {
            return new Message(RESPONSE, response);
        }
        
        public Request getRequest() {
            if (this.tag == REQUEST) {
                return (Request) this.value;
            } else {
                throw new RuntimeException("expected REQUEST, got " + this.tag);
            }
        }
        
        public wit.worlds.ProcessV0.Tuple2<Response, byte[]> getResponse() {
            if (this.tag == RESPONSE) {
                return (wit.worlds.ProcessV0.Tuple2<Response, byte[]>) this.value;
            } else {
                throw new RuntimeException("expected RESPONSE, got " + this.tag);
            }
        }
        
        public static final byte REQUEST = 0;
        public static final byte RESPONSE = 1;
    }
    
    /**
    * On-exit is a setting that determines what happens when a process
    * panics, completes, or otherwise "ends". NOTE: requests should have
    * expects-response set to false, will always be set to that by kernel.
    */
    
    public static final class OnExit {
        public final byte tag;
        private final Object value;
        
        private OnExit(byte tag, Object value) {
            this.tag = tag;
            this.value = value;
        }
        
        public static OnExit none() {
            return new OnExit(NONE, null);
        }
        
        public static OnExit restart() {
            return new OnExit(RESTART, null);
        }
        
        public static OnExit requests(ArrayList<wit.worlds.ProcessV0.Tuple3<Address, Request, LazyLoadBlob>> requests) {
            return new OnExit(REQUESTS, requests);
        }
        
        public ArrayList<wit.worlds.ProcessV0.Tuple3<Address, Request, LazyLoadBlob>> getRequests() {
            if (this.tag == REQUESTS) {
                return (ArrayList<wit.worlds.ProcessV0.Tuple3<Address, Request, LazyLoadBlob>>) this.value;
            } else {
                throw new RuntimeException("expected REQUESTS, got " + this.tag);
            }
        }
        
        public static final byte NONE = 0;
        public static final byte RESTART = 1;
        public static final byte REQUESTS = 2;
    }
    
    public static enum SendErrorKind {
        OFFLINE, TIMEOUT
    }
    
    /**
    * Network errors come from trying to send a message to another node.
    * A message can fail by timing out, or by the node being entirely
    * unreachable (offline). In either case, the message is not delivered
    * and the process that sent it receives that message along with any
    * assigned context and/or lazy-load-blob, and is free to handle it as it
    * sees fit.
    */
    
    public static final class SendError {
        public final SendErrorKind kind;
        public final Address target;
        public final Message message;
        public final LazyLoadBlob lazyLoadBlob;
        
        public SendError(SendErrorKind kind, Address target, Message message, LazyLoadBlob lazyLoadBlob) {
            this.kind = kind;
            this.target = target;
            this.message = message;
            this.lazyLoadBlob = lazyLoadBlob;
        }
    }
    
    public static enum SpawnError {
        NAME_TAKEN, NO_FILE_AT_PATH
    }
    @Import(name = "print-to-terminal", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportPrintToTerminal(int p0, int p1, int p2);
    
    public static void printToTerminal(byte verbosity, String message) {
        byte[] bytes = (message).getBytes(StandardCharsets.UTF_8);
        wasmImportPrintToTerminal(((int) (verbosity)) & 0xFF, org.teavm.interop.Address.ofData(bytes).toInt(), bytes.length);
        
    }
    @Import(name = "set-on-exit", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportSetOnExit(int p0, int p1, int p2);
    
    public static void setOnExit(OnExit onExit) {
        ArrayList<wit.worlds.ProcessV0.Cleanup> cleanupList = new ArrayList<>();
        
        int lowered;
        int lowered46;
        int lowered47;
        
        switch ((onExit).tag) {
            case 0: {
                
                lowered = 0;
                lowered46 = 0;
                lowered47 = 0;
                
                break;
            }
            case 1: {
                
                lowered = 1;
                lowered46 = 0;
                lowered47 = 0;
                
                break;
            }
            case 2: {
                ArrayList<wit.worlds.ProcessV0.Tuple3<Address, Request, LazyLoadBlob>> payload5 = (onExit).getRequests();
                
                int address44 = Memory.malloc((payload5).size() * 112, 8).toInt();
                for (int index45 = 0; index45 < (payload5).size(); ++index45) {
                    wit.worlds.ProcessV0.Tuple3<Address, Request, LazyLoadBlob> element6 = (payload5).get(index45);
                    int base7 = address44 + (index45 * 112);
                    byte[] bytes = (((element6).f0).node).getBytes(StandardCharsets.UTF_8);
                    org.teavm.interop.Address.fromInt((base7) + 4).putInt(bytes.length);
                    org.teavm.interop.Address.fromInt((base7) + 0).putInt(org.teavm.interop.Address.ofData(bytes).toInt());
                    byte[] bytes8 = ((((element6).f0).process).processName).getBytes(StandardCharsets.UTF_8);
                    org.teavm.interop.Address.fromInt((base7) + 12).putInt(bytes8.length);
                    org.teavm.interop.Address.fromInt((base7) + 8).putInt(org.teavm.interop.Address.ofData(bytes8).toInt());
                    byte[] bytes9 = ((((element6).f0).process).packageName).getBytes(StandardCharsets.UTF_8);
                    org.teavm.interop.Address.fromInt((base7) + 20).putInt(bytes9.length);
                    org.teavm.interop.Address.fromInt((base7) + 16).putInt(org.teavm.interop.Address.ofData(bytes9).toInt());
                    byte[] bytes10 = ((((element6).f0).process).publisherNode).getBytes(StandardCharsets.UTF_8);
                    org.teavm.interop.Address.fromInt((base7) + 28).putInt(bytes10.length);
                    org.teavm.interop.Address.fromInt((base7) + 24).putInt(org.teavm.interop.Address.ofData(bytes10).toInt());
                    org.teavm.interop.Address.fromInt((base7) + 32).putByte((byte) ((((element6).f1).inherit ? 1 : 0)));
                    
                    if ((((element6).f1).expectsResponse) == null) {
                        
                        org.teavm.interop.Address.fromInt((base7) + 40).putByte((byte) (0));
                        
                    } else {
                        long payload16 = (long) (((element6).f1).expectsResponse);
                        org.teavm.interop.Address.fromInt((base7) + 40).putByte((byte) (1));
                        org.teavm.interop.Address.fromInt((base7) + 48).putLong(payload16);
                        
                    }
                    org.teavm.interop.Address.fromInt((base7) + 60).putInt((((element6).f1).body).length);
                    org.teavm.interop.Address.fromInt((base7) + 56).putInt(org.teavm.interop.Address.ofData(((element6).f1).body).toInt());
                    
                    if ((((element6).f1).metadata) == null) {
                        
                        org.teavm.interop.Address.fromInt((base7) + 64).putByte((byte) (0));
                        
                    } else {
                        String payload22 = (String) (((element6).f1).metadata);
                        org.teavm.interop.Address.fromInt((base7) + 64).putByte((byte) (1));
                        byte[] bytes23 = (payload22).getBytes(StandardCharsets.UTF_8);
                        org.teavm.interop.Address.fromInt((base7) + 72).putInt(bytes23.length);
                        org.teavm.interop.Address.fromInt((base7) + 68).putInt(org.teavm.interop.Address.ofData(bytes23).toInt());
                        
                    }
                    
                    int address = Memory.malloc((((element6).f1).capabilities).size() * 40, 4).toInt();
                    for (int index = 0; index < (((element6).f1).capabilities).size(); ++index) {
                        Capability element24 = (((element6).f1).capabilities).get(index);
                        int base25 = address + (index * 40);
                        byte[] bytes26 = (((element24).issuer).node).getBytes(StandardCharsets.UTF_8);
                        org.teavm.interop.Address.fromInt((base25) + 4).putInt(bytes26.length);
                        org.teavm.interop.Address.fromInt((base25) + 0).putInt(org.teavm.interop.Address.ofData(bytes26).toInt());
                        byte[] bytes27 = ((((element24).issuer).process).processName).getBytes(StandardCharsets.UTF_8);
                        org.teavm.interop.Address.fromInt((base25) + 12).putInt(bytes27.length);
                        org.teavm.interop.Address.fromInt((base25) + 8).putInt(org.teavm.interop.Address.ofData(bytes27).toInt());
                        byte[] bytes28 = ((((element24).issuer).process).packageName).getBytes(StandardCharsets.UTF_8);
                        org.teavm.interop.Address.fromInt((base25) + 20).putInt(bytes28.length);
                        org.teavm.interop.Address.fromInt((base25) + 16).putInt(org.teavm.interop.Address.ofData(bytes28).toInt());
                        byte[] bytes29 = ((((element24).issuer).process).publisherNode).getBytes(StandardCharsets.UTF_8);
                        org.teavm.interop.Address.fromInt((base25) + 28).putInt(bytes29.length);
                        org.teavm.interop.Address.fromInt((base25) + 24).putInt(org.teavm.interop.Address.ofData(bytes29).toInt());
                        byte[] bytes30 = ((element24).params).getBytes(StandardCharsets.UTF_8);
                        org.teavm.interop.Address.fromInt((base25) + 36).putInt(bytes30.length);
                        org.teavm.interop.Address.fromInt((base25) + 32).putInt(org.teavm.interop.Address.ofData(bytes30).toInt());
                        
                    }
                    org.teavm.interop.Address.fromInt((base7) + 80).putInt((((element6).f1).capabilities).size());
                    org.teavm.interop.Address.fromInt((base7) + 76).putInt(address);
                    
                    if (((element6).f2) == null) {
                        
                        org.teavm.interop.Address.fromInt((base7) + 88).putByte((byte) (0));
                        
                    } else {
                        LazyLoadBlob payload36 = (LazyLoadBlob) ((element6).f2);
                        org.teavm.interop.Address.fromInt((base7) + 88).putByte((byte) (1));
                        
                        if (((payload36).mime) == null) {
                            
                            org.teavm.interop.Address.fromInt((base7) + 92).putByte((byte) (0));
                            
                        } else {
                            String payload42 = (String) ((payload36).mime);
                            org.teavm.interop.Address.fromInt((base7) + 92).putByte((byte) (1));
                            byte[] bytes43 = (payload42).getBytes(StandardCharsets.UTF_8);
                            org.teavm.interop.Address.fromInt((base7) + 100).putInt(bytes43.length);
                            org.teavm.interop.Address.fromInt((base7) + 96).putInt(org.teavm.interop.Address.ofData(bytes43).toInt());
                            
                        }
                        org.teavm.interop.Address.fromInt((base7) + 108).putInt(((payload36).bytes).length);
                        org.teavm.interop.Address.fromInt((base7) + 104).putInt(org.teavm.interop.Address.ofData((payload36).bytes).toInt());
                        
                    }
                    cleanupList.add(new wit.worlds.ProcessV0.Cleanup(address, (((element6).f1).capabilities).size() * 40, 4));
                    
                }
                cleanupList.add(new wit.worlds.ProcessV0.Cleanup(address44, (payload5).size() * 112, 8));
                
                lowered = 2;
                lowered46 = address44;
                lowered47 = (payload5).size();
                
                break;
            }
            
            default: throw new AssertionError("invalid discriminant: " + (onExit).tag);
        }
        wasmImportSetOnExit(lowered, lowered46, lowered47);
        
        for (wit.worlds.ProcessV0.Cleanup cleanup : cleanupList) {
            Memory.free(org.teavm.interop.Address.fromInt(cleanup.address), cleanup.size, cleanup.align);
        }
        
    }
    @Import(name = "get-on-exit", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportGetOnExit(int p0);
    
    public static OnExit getOnExit() {
        wasmImportGetOnExit(wit.worlds.ProcessV0.RETURN_AREA);
        
        OnExit lifted41;
        
        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).getByte()) & 0xFF)) {
            case 0: {
                
                lifted41 = OnExit.none();
                break;
            }
            case 1: {
                
                lifted41 = OnExit.restart();
                break;
            }
            case 2: {
                
                ArrayList<wit.worlds.ProcessV0.Tuple3<Address, Request, LazyLoadBlob>> array39 = new ArrayList<>(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 8).getInt());
                for (int index40 = 0; index40 < (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 8).getInt()); ++index40) {
                    int base5 = (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 4).getInt()) + (index40 * 112);
                    
                    byte[] bytes = new byte[org.teavm.interop.Address.fromInt((base5) + 4).getInt()];
                    Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base5) + 0).getInt()), bytes, 0, org.teavm.interop.Address.fromInt((base5) + 4).getInt());
                    
                    byte[] bytes6 = new byte[org.teavm.interop.Address.fromInt((base5) + 12).getInt()];
                    Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base5) + 8).getInt()), bytes6, 0, org.teavm.interop.Address.fromInt((base5) + 12).getInt());
                    
                    byte[] bytes7 = new byte[org.teavm.interop.Address.fromInt((base5) + 20).getInt()];
                    Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base5) + 16).getInt()), bytes7, 0, org.teavm.interop.Address.fromInt((base5) + 20).getInt());
                    
                    byte[] bytes8 = new byte[org.teavm.interop.Address.fromInt((base5) + 28).getInt()];
                    Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base5) + 24).getInt()), bytes8, 0, org.teavm.interop.Address.fromInt((base5) + 28).getInt());
                    
                    Long lifted;
                    
                    switch ((((int) org.teavm.interop.Address.fromInt((base5) + 40).getByte()) & 0xFF)) {
                        case 0: {
                            lifted = null;
                            break;
                        }
                        
                        case 1: {
                            
                            lifted = org.teavm.interop.Address.fromInt((base5) + 48).getLong();
                            break;
                        }
                        
                        default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((base5) + 40).getByte()) & 0xFF)));
                    }
                    
                    byte[] array = new byte[org.teavm.interop.Address.fromInt((base5) + 60).getInt()];
                    Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base5) + 56).getInt()), array, 0, (array).length);
                    
                    String lifted18;
                    
                    switch ((((int) org.teavm.interop.Address.fromInt((base5) + 64).getByte()) & 0xFF)) {
                        case 0: {
                            lifted18 = null;
                            break;
                        }
                        
                        case 1: {
                            
                            byte[] bytes17 = new byte[org.teavm.interop.Address.fromInt((base5) + 72).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base5) + 68).getInt()), bytes17, 0, org.teavm.interop.Address.fromInt((base5) + 72).getInt());
                            
                            lifted18 = new String(bytes17, StandardCharsets.UTF_8);
                            break;
                        }
                        
                        default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((base5) + 64).getByte()) & 0xFF)));
                    }
                    
                    ArrayList<Capability> array26 = new ArrayList<>(org.teavm.interop.Address.fromInt((base5) + 80).getInt());
                    for (int index = 0; index < (org.teavm.interop.Address.fromInt((base5) + 80).getInt()); ++index) {
                        int base20 = (org.teavm.interop.Address.fromInt((base5) + 76).getInt()) + (index * 40);
                        
                        byte[] bytes21 = new byte[org.teavm.interop.Address.fromInt((base20) + 4).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base20) + 0).getInt()), bytes21, 0, org.teavm.interop.Address.fromInt((base20) + 4).getInt());
                        
                        byte[] bytes22 = new byte[org.teavm.interop.Address.fromInt((base20) + 12).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base20) + 8).getInt()), bytes22, 0, org.teavm.interop.Address.fromInt((base20) + 12).getInt());
                        
                        byte[] bytes23 = new byte[org.teavm.interop.Address.fromInt((base20) + 20).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base20) + 16).getInt()), bytes23, 0, org.teavm.interop.Address.fromInt((base20) + 20).getInt());
                        
                        byte[] bytes24 = new byte[org.teavm.interop.Address.fromInt((base20) + 28).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base20) + 24).getInt()), bytes24, 0, org.teavm.interop.Address.fromInt((base20) + 28).getInt());
                        
                        byte[] bytes25 = new byte[org.teavm.interop.Address.fromInt((base20) + 36).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base20) + 32).getInt()), bytes25, 0, org.teavm.interop.Address.fromInt((base20) + 36).getInt());
                        
                        array26.add(new Capability(new Address(new String(bytes21, StandardCharsets.UTF_8), new ProcessId(new String(bytes22, StandardCharsets.UTF_8), new String(bytes23, StandardCharsets.UTF_8), new String(bytes24, StandardCharsets.UTF_8))), new String(bytes25, StandardCharsets.UTF_8)));
                    }
                    Memory.free(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base5) + 76).getInt()), (org.teavm.interop.Address.fromInt((base5) + 80).getInt()) * 40, 4);
                    
                    LazyLoadBlob lifted38;
                    
                    switch ((((int) org.teavm.interop.Address.fromInt((base5) + 88).getByte()) & 0xFF)) {
                        case 0: {
                            lifted38 = null;
                            break;
                        }
                        
                        case 1: {
                            
                            String lifted36;
                            
                            switch ((((int) org.teavm.interop.Address.fromInt((base5) + 92).getByte()) & 0xFF)) {
                                case 0: {
                                    lifted36 = null;
                                    break;
                                }
                                
                                case 1: {
                                    
                                    byte[] bytes35 = new byte[org.teavm.interop.Address.fromInt((base5) + 100).getInt()];
                                    Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base5) + 96).getInt()), bytes35, 0, org.teavm.interop.Address.fromInt((base5) + 100).getInt());
                                    
                                    lifted36 = new String(bytes35, StandardCharsets.UTF_8);
                                    break;
                                }
                                
                                default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((base5) + 92).getByte()) & 0xFF)));
                            }
                            
                            byte[] array37 = new byte[org.teavm.interop.Address.fromInt((base5) + 108).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base5) + 104).getInt()), array37, 0, (array37).length);
                            
                            lifted38 = new LazyLoadBlob(lifted36, array37);
                            break;
                        }
                        
                        default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((base5) + 88).getByte()) & 0xFF)));
                    }
                    
                    array39.add(new wit.worlds.ProcessV0.Tuple3<Address, Request, LazyLoadBlob>(new Address(new String(bytes, StandardCharsets.UTF_8), new ProcessId(new String(bytes6, StandardCharsets.UTF_8), new String(bytes7, StandardCharsets.UTF_8), new String(bytes8, StandardCharsets.UTF_8))), new Request(((((int) org.teavm.interop.Address.fromInt((base5) + 32).getByte()) & 0xFF) != 0), lifted, array, lifted18, array26), lifted38));
                }
                Memory.free(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 4).getInt()), (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 8).getInt()) * 112, 8);
                
                lifted41 = OnExit.requests(array39);
                break;
            }
            
            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).getByte()) & 0xFF)));
        }
        return lifted41;
        
    }
    @Import(name = "get-state", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportGetState(int p0);
    
    public static byte[] getState() {
        wasmImportGetState(wit.worlds.ProcessV0.RETURN_AREA);
        
        byte[] lifted;
        
        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).getByte()) & 0xFF)) {
            case 0: {
                lifted = null;
                break;
            }
            
            case 1: {
                
                byte[] array = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 8).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 4).getInt()), array, 0, (array).length);
                
                lifted = array;
                break;
            }
            
            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).getByte()) & 0xFF)));
        }
        return lifted;
        
    }
    @Import(name = "set-state", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportSetState(int p0, int p1);
    
    public static void setState(byte[] bytes) {
        wasmImportSetState(org.teavm.interop.Address.ofData(bytes).toInt(), (bytes).length);
        
    }
    @Import(name = "clear-state", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportClearState();
    
    public static void clearState() {
        wasmImportClearState();
        
    }
    @Import(name = "spawn", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportSpawn(int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9, int p10, int p11, int p12, int p13);
    
    public static wit.worlds.ProcessV0.Result<ProcessId, SpawnError> spawn(String name, String wasmPath, OnExit onExit, ArrayList<Capability> requestCapabilities, ArrayList<ProcessId> grantCapabilities, boolean public_) {
        ArrayList<wit.worlds.ProcessV0.Cleanup> cleanupList = new ArrayList<>();
        
        int lowered;
        int lowered3;
        int lowered4;
        
        if ((name) == null) {
            
            lowered = 0;
            lowered3 = 0;
            lowered4 = 0;
            
        } else {
            String payload2 = (String) (name);
            byte[] bytes = (payload2).getBytes(StandardCharsets.UTF_8);
            
            lowered = 1;
            lowered3 = org.teavm.interop.Address.ofData(bytes).toInt();
            lowered4 = bytes.length;
            
        }
        byte[] bytes5 = (wasmPath).getBytes(StandardCharsets.UTF_8);
        
        int lowered56;
        int lowered57;
        int lowered58;
        
        switch ((onExit).tag) {
            case 0: {
                
                lowered56 = 0;
                lowered57 = 0;
                lowered58 = 0;
                
                break;
            }
            case 1: {
                
                lowered56 = 1;
                lowered57 = 0;
                lowered58 = 0;
                
                break;
            }
            case 2: {
                ArrayList<wit.worlds.ProcessV0.Tuple3<Address, Request, LazyLoadBlob>> payload14 = (onExit).getRequests();
                
                int address54 = Memory.malloc((payload14).size() * 112, 8).toInt();
                for (int index55 = 0; index55 < (payload14).size(); ++index55) {
                    wit.worlds.ProcessV0.Tuple3<Address, Request, LazyLoadBlob> element15 = (payload14).get(index55);
                    int base16 = address54 + (index55 * 112);
                    byte[] bytes17 = (((element15).f0).node).getBytes(StandardCharsets.UTF_8);
                    org.teavm.interop.Address.fromInt((base16) + 4).putInt(bytes17.length);
                    org.teavm.interop.Address.fromInt((base16) + 0).putInt(org.teavm.interop.Address.ofData(bytes17).toInt());
                    byte[] bytes18 = ((((element15).f0).process).processName).getBytes(StandardCharsets.UTF_8);
                    org.teavm.interop.Address.fromInt((base16) + 12).putInt(bytes18.length);
                    org.teavm.interop.Address.fromInt((base16) + 8).putInt(org.teavm.interop.Address.ofData(bytes18).toInt());
                    byte[] bytes19 = ((((element15).f0).process).packageName).getBytes(StandardCharsets.UTF_8);
                    org.teavm.interop.Address.fromInt((base16) + 20).putInt(bytes19.length);
                    org.teavm.interop.Address.fromInt((base16) + 16).putInt(org.teavm.interop.Address.ofData(bytes19).toInt());
                    byte[] bytes20 = ((((element15).f0).process).publisherNode).getBytes(StandardCharsets.UTF_8);
                    org.teavm.interop.Address.fromInt((base16) + 28).putInt(bytes20.length);
                    org.teavm.interop.Address.fromInt((base16) + 24).putInt(org.teavm.interop.Address.ofData(bytes20).toInt());
                    org.teavm.interop.Address.fromInt((base16) + 32).putByte((byte) ((((element15).f1).inherit ? 1 : 0)));
                    
                    if ((((element15).f1).expectsResponse) == null) {
                        
                        org.teavm.interop.Address.fromInt((base16) + 40).putByte((byte) (0));
                        
                    } else {
                        long payload26 = (long) (((element15).f1).expectsResponse);
                        org.teavm.interop.Address.fromInt((base16) + 40).putByte((byte) (1));
                        org.teavm.interop.Address.fromInt((base16) + 48).putLong(payload26);
                        
                    }
                    org.teavm.interop.Address.fromInt((base16) + 60).putInt((((element15).f1).body).length);
                    org.teavm.interop.Address.fromInt((base16) + 56).putInt(org.teavm.interop.Address.ofData(((element15).f1).body).toInt());
                    
                    if ((((element15).f1).metadata) == null) {
                        
                        org.teavm.interop.Address.fromInt((base16) + 64).putByte((byte) (0));
                        
                    } else {
                        String payload32 = (String) (((element15).f1).metadata);
                        org.teavm.interop.Address.fromInt((base16) + 64).putByte((byte) (1));
                        byte[] bytes33 = (payload32).getBytes(StandardCharsets.UTF_8);
                        org.teavm.interop.Address.fromInt((base16) + 72).putInt(bytes33.length);
                        org.teavm.interop.Address.fromInt((base16) + 68).putInt(org.teavm.interop.Address.ofData(bytes33).toInt());
                        
                    }
                    
                    int address = Memory.malloc((((element15).f1).capabilities).size() * 40, 4).toInt();
                    for (int index = 0; index < (((element15).f1).capabilities).size(); ++index) {
                        Capability element34 = (((element15).f1).capabilities).get(index);
                        int base35 = address + (index * 40);
                        byte[] bytes36 = (((element34).issuer).node).getBytes(StandardCharsets.UTF_8);
                        org.teavm.interop.Address.fromInt((base35) + 4).putInt(bytes36.length);
                        org.teavm.interop.Address.fromInt((base35) + 0).putInt(org.teavm.interop.Address.ofData(bytes36).toInt());
                        byte[] bytes37 = ((((element34).issuer).process).processName).getBytes(StandardCharsets.UTF_8);
                        org.teavm.interop.Address.fromInt((base35) + 12).putInt(bytes37.length);
                        org.teavm.interop.Address.fromInt((base35) + 8).putInt(org.teavm.interop.Address.ofData(bytes37).toInt());
                        byte[] bytes38 = ((((element34).issuer).process).packageName).getBytes(StandardCharsets.UTF_8);
                        org.teavm.interop.Address.fromInt((base35) + 20).putInt(bytes38.length);
                        org.teavm.interop.Address.fromInt((base35) + 16).putInt(org.teavm.interop.Address.ofData(bytes38).toInt());
                        byte[] bytes39 = ((((element34).issuer).process).publisherNode).getBytes(StandardCharsets.UTF_8);
                        org.teavm.interop.Address.fromInt((base35) + 28).putInt(bytes39.length);
                        org.teavm.interop.Address.fromInt((base35) + 24).putInt(org.teavm.interop.Address.ofData(bytes39).toInt());
                        byte[] bytes40 = ((element34).params).getBytes(StandardCharsets.UTF_8);
                        org.teavm.interop.Address.fromInt((base35) + 36).putInt(bytes40.length);
                        org.teavm.interop.Address.fromInt((base35) + 32).putInt(org.teavm.interop.Address.ofData(bytes40).toInt());
                        
                    }
                    org.teavm.interop.Address.fromInt((base16) + 80).putInt((((element15).f1).capabilities).size());
                    org.teavm.interop.Address.fromInt((base16) + 76).putInt(address);
                    
                    if (((element15).f2) == null) {
                        
                        org.teavm.interop.Address.fromInt((base16) + 88).putByte((byte) (0));
                        
                    } else {
                        LazyLoadBlob payload46 = (LazyLoadBlob) ((element15).f2);
                        org.teavm.interop.Address.fromInt((base16) + 88).putByte((byte) (1));
                        
                        if (((payload46).mime) == null) {
                            
                            org.teavm.interop.Address.fromInt((base16) + 92).putByte((byte) (0));
                            
                        } else {
                            String payload52 = (String) ((payload46).mime);
                            org.teavm.interop.Address.fromInt((base16) + 92).putByte((byte) (1));
                            byte[] bytes53 = (payload52).getBytes(StandardCharsets.UTF_8);
                            org.teavm.interop.Address.fromInt((base16) + 100).putInt(bytes53.length);
                            org.teavm.interop.Address.fromInt((base16) + 96).putInt(org.teavm.interop.Address.ofData(bytes53).toInt());
                            
                        }
                        org.teavm.interop.Address.fromInt((base16) + 108).putInt(((payload46).bytes).length);
                        org.teavm.interop.Address.fromInt((base16) + 104).putInt(org.teavm.interop.Address.ofData((payload46).bytes).toInt());
                        
                    }
                    cleanupList.add(new wit.worlds.ProcessV0.Cleanup(address, (((element15).f1).capabilities).size() * 40, 4));
                    
                }
                cleanupList.add(new wit.worlds.ProcessV0.Cleanup(address54, (payload14).size() * 112, 8));
                
                lowered56 = 2;
                lowered57 = address54;
                lowered58 = (payload14).size();
                
                break;
            }
            
            default: throw new AssertionError("invalid discriminant: " + (onExit).tag);
        }
        
        int address66 = Memory.malloc((requestCapabilities).size() * 40, 4).toInt();
        for (int index67 = 0; index67 < (requestCapabilities).size(); ++index67) {
            Capability element59 = (requestCapabilities).get(index67);
            int base60 = address66 + (index67 * 40);
            byte[] bytes61 = (((element59).issuer).node).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base60) + 4).putInt(bytes61.length);
            org.teavm.interop.Address.fromInt((base60) + 0).putInt(org.teavm.interop.Address.ofData(bytes61).toInt());
            byte[] bytes62 = ((((element59).issuer).process).processName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base60) + 12).putInt(bytes62.length);
            org.teavm.interop.Address.fromInt((base60) + 8).putInt(org.teavm.interop.Address.ofData(bytes62).toInt());
            byte[] bytes63 = ((((element59).issuer).process).packageName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base60) + 20).putInt(bytes63.length);
            org.teavm.interop.Address.fromInt((base60) + 16).putInt(org.teavm.interop.Address.ofData(bytes63).toInt());
            byte[] bytes64 = ((((element59).issuer).process).publisherNode).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base60) + 28).putInt(bytes64.length);
            org.teavm.interop.Address.fromInt((base60) + 24).putInt(org.teavm.interop.Address.ofData(bytes64).toInt());
            byte[] bytes65 = ((element59).params).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base60) + 36).putInt(bytes65.length);
            org.teavm.interop.Address.fromInt((base60) + 32).putInt(org.teavm.interop.Address.ofData(bytes65).toInt());
            
        }
        
        int address73 = Memory.malloc((grantCapabilities).size() * 24, 4).toInt();
        for (int index74 = 0; index74 < (grantCapabilities).size(); ++index74) {
            ProcessId element68 = (grantCapabilities).get(index74);
            int base69 = address73 + (index74 * 24);
            byte[] bytes70 = ((element68).processName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base69) + 4).putInt(bytes70.length);
            org.teavm.interop.Address.fromInt((base69) + 0).putInt(org.teavm.interop.Address.ofData(bytes70).toInt());
            byte[] bytes71 = ((element68).packageName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base69) + 12).putInt(bytes71.length);
            org.teavm.interop.Address.fromInt((base69) + 8).putInt(org.teavm.interop.Address.ofData(bytes71).toInt());
            byte[] bytes72 = ((element68).publisherNode).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base69) + 20).putInt(bytes72.length);
            org.teavm.interop.Address.fromInt((base69) + 16).putInt(org.teavm.interop.Address.ofData(bytes72).toInt());
            
        }
        wasmImportSpawn(lowered, lowered3, lowered4, org.teavm.interop.Address.ofData(bytes5).toInt(), bytes5.length, lowered56, lowered57, lowered58, address66, (requestCapabilities).size(), address73, (grantCapabilities).size(), (public_ ? 1 : 0), wit.worlds.ProcessV0.RETURN_AREA);
        
        wit.worlds.ProcessV0.Result<ProcessId, SpawnError> lifted;
        
        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).getByte()) & 0xFF)) {
            case 0: {
                
                byte[] bytes77 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 8).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 4).getInt()), bytes77, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 8).getInt());
                
                byte[] bytes78 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 16).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 12).getInt()), bytes78, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 16).getInt());
                
                byte[] bytes79 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 24).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 20).getInt()), bytes79, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 24).getInt());
                
                lifted = wit.worlds.ProcessV0.Result.<ProcessId, SpawnError>ok(new ProcessId(new String(bytes77, StandardCharsets.UTF_8), new String(bytes78, StandardCharsets.UTF_8), new String(bytes79, StandardCharsets.UTF_8)));
                break;
            }
            case 1: {
                
                lifted = wit.worlds.ProcessV0.Result.<ProcessId, SpawnError>err(SpawnError.values()[(((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 4).getByte()) & 0xFF)]);
                break;
            }
            
            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).getByte()) & 0xFF)));
        }
        Memory.free(org.teavm.interop.Address.fromInt(address66), (requestCapabilities).size() * 40, 4);
        Memory.free(org.teavm.interop.Address.fromInt(address73), (grantCapabilities).size() * 24, 4);
        
        for (wit.worlds.ProcessV0.Cleanup cleanup : cleanupList) {
            Memory.free(org.teavm.interop.Address.fromInt(cleanup.address), cleanup.size, cleanup.align);
        }
        return lifted;
        
    }
    @Import(name = "save-capabilities", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportSaveCapabilities(int p0, int p1);
    
    public static void saveCapabilities(ArrayList<Capability> caps) {
        
        int address = Memory.malloc((caps).size() * 40, 4).toInt();
        for (int index = 0; index < (caps).size(); ++index) {
            Capability element = (caps).get(index);
            int base = address + (index * 40);
            byte[] bytes = (((element).issuer).node).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base) + 4).putInt(bytes.length);
            org.teavm.interop.Address.fromInt((base) + 0).putInt(org.teavm.interop.Address.ofData(bytes).toInt());
            byte[] bytes0 = ((((element).issuer).process).processName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base) + 12).putInt(bytes0.length);
            org.teavm.interop.Address.fromInt((base) + 8).putInt(org.teavm.interop.Address.ofData(bytes0).toInt());
            byte[] bytes1 = ((((element).issuer).process).packageName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base) + 20).putInt(bytes1.length);
            org.teavm.interop.Address.fromInt((base) + 16).putInt(org.teavm.interop.Address.ofData(bytes1).toInt());
            byte[] bytes2 = ((((element).issuer).process).publisherNode).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base) + 28).putInt(bytes2.length);
            org.teavm.interop.Address.fromInt((base) + 24).putInt(org.teavm.interop.Address.ofData(bytes2).toInt());
            byte[] bytes3 = ((element).params).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base) + 36).putInt(bytes3.length);
            org.teavm.interop.Address.fromInt((base) + 32).putInt(org.teavm.interop.Address.ofData(bytes3).toInt());
            
        }
        wasmImportSaveCapabilities(address, (caps).size());
        Memory.free(org.teavm.interop.Address.fromInt(address), (caps).size() * 40, 4);
        
    }
    @Import(name = "drop-capabilities", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportDropCapabilities(int p0, int p1);
    
    public static void dropCapabilities(ArrayList<Capability> caps) {
        
        int address = Memory.malloc((caps).size() * 40, 4).toInt();
        for (int index = 0; index < (caps).size(); ++index) {
            Capability element = (caps).get(index);
            int base = address + (index * 40);
            byte[] bytes = (((element).issuer).node).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base) + 4).putInt(bytes.length);
            org.teavm.interop.Address.fromInt((base) + 0).putInt(org.teavm.interop.Address.ofData(bytes).toInt());
            byte[] bytes0 = ((((element).issuer).process).processName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base) + 12).putInt(bytes0.length);
            org.teavm.interop.Address.fromInt((base) + 8).putInt(org.teavm.interop.Address.ofData(bytes0).toInt());
            byte[] bytes1 = ((((element).issuer).process).packageName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base) + 20).putInt(bytes1.length);
            org.teavm.interop.Address.fromInt((base) + 16).putInt(org.teavm.interop.Address.ofData(bytes1).toInt());
            byte[] bytes2 = ((((element).issuer).process).publisherNode).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base) + 28).putInt(bytes2.length);
            org.teavm.interop.Address.fromInt((base) + 24).putInt(org.teavm.interop.Address.ofData(bytes2).toInt());
            byte[] bytes3 = ((element).params).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base) + 36).putInt(bytes3.length);
            org.teavm.interop.Address.fromInt((base) + 32).putInt(org.teavm.interop.Address.ofData(bytes3).toInt());
            
        }
        wasmImportDropCapabilities(address, (caps).size());
        Memory.free(org.teavm.interop.Address.fromInt(address), (caps).size() * 40, 4);
        
    }
    @Import(name = "our-capabilities", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportOurCapabilities(int p0);
    
    public static ArrayList<Capability> ourCapabilities() {
        wasmImportOurCapabilities(wit.worlds.ProcessV0.RETURN_AREA);
        
        ArrayList<Capability> array = new ArrayList<>(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 4).getInt());
        for (int index = 0; index < (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 4).getInt()); ++index) {
            int base = (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).getInt()) + (index * 40);
            
            byte[] bytes = new byte[org.teavm.interop.Address.fromInt((base) + 4).getInt()];
            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base) + 0).getInt()), bytes, 0, org.teavm.interop.Address.fromInt((base) + 4).getInt());
            
            byte[] bytes0 = new byte[org.teavm.interop.Address.fromInt((base) + 12).getInt()];
            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base) + 8).getInt()), bytes0, 0, org.teavm.interop.Address.fromInt((base) + 12).getInt());
            
            byte[] bytes1 = new byte[org.teavm.interop.Address.fromInt((base) + 20).getInt()];
            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base) + 16).getInt()), bytes1, 0, org.teavm.interop.Address.fromInt((base) + 20).getInt());
            
            byte[] bytes2 = new byte[org.teavm.interop.Address.fromInt((base) + 28).getInt()];
            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base) + 24).getInt()), bytes2, 0, org.teavm.interop.Address.fromInt((base) + 28).getInt());
            
            byte[] bytes3 = new byte[org.teavm.interop.Address.fromInt((base) + 36).getInt()];
            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base) + 32).getInt()), bytes3, 0, org.teavm.interop.Address.fromInt((base) + 36).getInt());
            
            array.add(new Capability(new Address(new String(bytes, StandardCharsets.UTF_8), new ProcessId(new String(bytes0, StandardCharsets.UTF_8), new String(bytes1, StandardCharsets.UTF_8), new String(bytes2, StandardCharsets.UTF_8))), new String(bytes3, StandardCharsets.UTF_8)));
        }
        Memory.free(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).getInt()), (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 4).getInt()) * 40, 4);
        return array;
        
    }
    @Import(name = "receive", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportReceive(int p0);
    
    public static wit.worlds.ProcessV0.Result<wit.worlds.ProcessV0.Tuple2<Address, Message>, wit.worlds.ProcessV0.Tuple2<SendError, byte[]>> receive() {
        wasmImportReceive(wit.worlds.ProcessV0.RETURN_AREA);
        
        wit.worlds.ProcessV0.Result<wit.worlds.ProcessV0.Tuple2<Address, Message>, wit.worlds.ProcessV0.Tuple2<SendError, byte[]>> lifted120;
        
        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).getByte()) & 0xFF)) {
            case 0: {
                
                byte[] bytes = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 12).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 8).getInt()), bytes, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 12).getInt());
                
                byte[] bytes0 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 20).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 16).getInt()), bytes0, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 20).getInt());
                
                byte[] bytes1 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 28).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 24).getInt()), bytes1, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 28).getInt());
                
                byte[] bytes2 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 36).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 32).getInt()), bytes2, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 36).getInt());
                
                Message lifted47;
                
                switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 40).getByte()) & 0xFF)) {
                    case 0: {
                        
                        Long lifted;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 56).getByte()) & 0xFF)) {
                            case 0: {
                                lifted = null;
                                break;
                            }
                            
                            case 1: {
                                
                                lifted = org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 64).getLong();
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 56).getByte()) & 0xFF)));
                        }
                        
                        byte[] array = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 76).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 72).getInt()), array, 0, (array).length);
                        
                        String lifted14;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).getByte()) & 0xFF)) {
                            case 0: {
                                lifted14 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                byte[] bytes13 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).getInt()];
                                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 84).getInt()), bytes13, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).getInt());
                                
                                lifted14 = new String(bytes13, StandardCharsets.UTF_8);
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).getByte()) & 0xFF)));
                        }
                        
                        ArrayList<Capability> array22 = new ArrayList<>(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 96).getInt());
                        for (int index = 0; index < (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 96).getInt()); ++index) {
                            int base16 = (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 92).getInt()) + (index * 40);
                            
                            byte[] bytes17 = new byte[org.teavm.interop.Address.fromInt((base16) + 4).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base16) + 0).getInt()), bytes17, 0, org.teavm.interop.Address.fromInt((base16) + 4).getInt());
                            
                            byte[] bytes18 = new byte[org.teavm.interop.Address.fromInt((base16) + 12).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base16) + 8).getInt()), bytes18, 0, org.teavm.interop.Address.fromInt((base16) + 12).getInt());
                            
                            byte[] bytes19 = new byte[org.teavm.interop.Address.fromInt((base16) + 20).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base16) + 16).getInt()), bytes19, 0, org.teavm.interop.Address.fromInt((base16) + 20).getInt());
                            
                            byte[] bytes20 = new byte[org.teavm.interop.Address.fromInt((base16) + 28).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base16) + 24).getInt()), bytes20, 0, org.teavm.interop.Address.fromInt((base16) + 28).getInt());
                            
                            byte[] bytes21 = new byte[org.teavm.interop.Address.fromInt((base16) + 36).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base16) + 32).getInt()), bytes21, 0, org.teavm.interop.Address.fromInt((base16) + 36).getInt());
                            
                            array22.add(new Capability(new Address(new String(bytes17, StandardCharsets.UTF_8), new ProcessId(new String(bytes18, StandardCharsets.UTF_8), new String(bytes19, StandardCharsets.UTF_8), new String(bytes20, StandardCharsets.UTF_8))), new String(bytes21, StandardCharsets.UTF_8)));
                        }
                        Memory.free(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 92).getInt()), (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 96).getInt()) * 40, 4);
                        
                        lifted47 = Message.request(new Request(((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 48).getByte()) & 0xFF) != 0), lifted, array, lifted14, array22));
                        break;
                    }
                    case 1: {
                        
                        byte[] array25 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 56).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 52).getInt()), array25, 0, (array25).length);
                        
                        String lifted31;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 60).getByte()) & 0xFF)) {
                            case 0: {
                                lifted31 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                byte[] bytes30 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 68).getInt()];
                                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 64).getInt()), bytes30, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 68).getInt());
                                
                                lifted31 = new String(bytes30, StandardCharsets.UTF_8);
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 60).getByte()) & 0xFF)));
                        }
                        
                        ArrayList<Capability> array39 = new ArrayList<>(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 76).getInt());
                        for (int index40 = 0; index40 < (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 76).getInt()); ++index40) {
                            int base33 = (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 72).getInt()) + (index40 * 40);
                            
                            byte[] bytes34 = new byte[org.teavm.interop.Address.fromInt((base33) + 4).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base33) + 0).getInt()), bytes34, 0, org.teavm.interop.Address.fromInt((base33) + 4).getInt());
                            
                            byte[] bytes35 = new byte[org.teavm.interop.Address.fromInt((base33) + 12).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base33) + 8).getInt()), bytes35, 0, org.teavm.interop.Address.fromInt((base33) + 12).getInt());
                            
                            byte[] bytes36 = new byte[org.teavm.interop.Address.fromInt((base33) + 20).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base33) + 16).getInt()), bytes36, 0, org.teavm.interop.Address.fromInt((base33) + 20).getInt());
                            
                            byte[] bytes37 = new byte[org.teavm.interop.Address.fromInt((base33) + 28).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base33) + 24).getInt()), bytes37, 0, org.teavm.interop.Address.fromInt((base33) + 28).getInt());
                            
                            byte[] bytes38 = new byte[org.teavm.interop.Address.fromInt((base33) + 36).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base33) + 32).getInt()), bytes38, 0, org.teavm.interop.Address.fromInt((base33) + 36).getInt());
                            
                            array39.add(new Capability(new Address(new String(bytes34, StandardCharsets.UTF_8), new ProcessId(new String(bytes35, StandardCharsets.UTF_8), new String(bytes36, StandardCharsets.UTF_8), new String(bytes37, StandardCharsets.UTF_8))), new String(bytes38, StandardCharsets.UTF_8)));
                        }
                        Memory.free(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 72).getInt()), (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 76).getInt()) * 40, 4);
                        
                        byte[] lifted46;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).getByte()) & 0xFF)) {
                            case 0: {
                                lifted46 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                byte[] array45 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).getInt()];
                                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 84).getInt()), array45, 0, (array45).length);
                                
                                lifted46 = array45;
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).getByte()) & 0xFF)));
                        }
                        
                        lifted47 = Message.response(new wit.worlds.ProcessV0.Tuple2<Response, byte[]>(new Response(((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 48).getByte()) & 0xFF) != 0), array25, lifted31, array39), lifted46));
                        break;
                    }
                    
                    default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 40).getByte()) & 0xFF)));
                }
                
                lifted120 = wit.worlds.ProcessV0.Result.<wit.worlds.ProcessV0.Tuple2<Address, Message>, wit.worlds.ProcessV0.Tuple2<SendError, byte[]>>ok(new wit.worlds.ProcessV0.Tuple2<Address, Message>(new Address(new String(bytes, StandardCharsets.UTF_8), new ProcessId(new String(bytes0, StandardCharsets.UTF_8), new String(bytes1, StandardCharsets.UTF_8), new String(bytes2, StandardCharsets.UTF_8))), lifted47));
                break;
            }
            case 1: {
                
                byte[] bytes50 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 16).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 12).getInt()), bytes50, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 16).getInt());
                
                byte[] bytes51 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 24).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 20).getInt()), bytes51, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 24).getInt());
                
                byte[] bytes52 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 32).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 28).getInt()), bytes52, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 32).getInt());
                
                byte[] bytes53 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 40).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 36).getInt()), bytes53, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 40).getInt());
                
                Message lifted101;
                
                switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 48).getByte()) & 0xFF)) {
                    case 0: {
                        
                        Long lifted60;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 64).getByte()) & 0xFF)) {
                            case 0: {
                                lifted60 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                lifted60 = org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 72).getLong();
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 64).getByte()) & 0xFF)));
                        }
                        
                        byte[] array61 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 84).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).getInt()), array61, 0, (array61).length);
                        
                        String lifted67;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).getByte()) & 0xFF)) {
                            case 0: {
                                lifted67 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                byte[] bytes66 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 96).getInt()];
                                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 92).getInt()), bytes66, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 96).getInt());
                                
                                lifted67 = new String(bytes66, StandardCharsets.UTF_8);
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).getByte()) & 0xFF)));
                        }
                        
                        ArrayList<Capability> array75 = new ArrayList<>(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 104).getInt());
                        for (int index76 = 0; index76 < (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 104).getInt()); ++index76) {
                            int base69 = (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 100).getInt()) + (index76 * 40);
                            
                            byte[] bytes70 = new byte[org.teavm.interop.Address.fromInt((base69) + 4).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base69) + 0).getInt()), bytes70, 0, org.teavm.interop.Address.fromInt((base69) + 4).getInt());
                            
                            byte[] bytes71 = new byte[org.teavm.interop.Address.fromInt((base69) + 12).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base69) + 8).getInt()), bytes71, 0, org.teavm.interop.Address.fromInt((base69) + 12).getInt());
                            
                            byte[] bytes72 = new byte[org.teavm.interop.Address.fromInt((base69) + 20).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base69) + 16).getInt()), bytes72, 0, org.teavm.interop.Address.fromInt((base69) + 20).getInt());
                            
                            byte[] bytes73 = new byte[org.teavm.interop.Address.fromInt((base69) + 28).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base69) + 24).getInt()), bytes73, 0, org.teavm.interop.Address.fromInt((base69) + 28).getInt());
                            
                            byte[] bytes74 = new byte[org.teavm.interop.Address.fromInt((base69) + 36).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base69) + 32).getInt()), bytes74, 0, org.teavm.interop.Address.fromInt((base69) + 36).getInt());
                            
                            array75.add(new Capability(new Address(new String(bytes70, StandardCharsets.UTF_8), new ProcessId(new String(bytes71, StandardCharsets.UTF_8), new String(bytes72, StandardCharsets.UTF_8), new String(bytes73, StandardCharsets.UTF_8))), new String(bytes74, StandardCharsets.UTF_8)));
                        }
                        Memory.free(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 100).getInt()), (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 104).getInt()) * 40, 4);
                        
                        lifted101 = Message.request(new Request(((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 56).getByte()) & 0xFF) != 0), lifted60, array61, lifted67, array75));
                        break;
                    }
                    case 1: {
                        
                        byte[] array79 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 64).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 60).getInt()), array79, 0, (array79).length);
                        
                        String lifted85;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 68).getByte()) & 0xFF)) {
                            case 0: {
                                lifted85 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                byte[] bytes84 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 76).getInt()];
                                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 72).getInt()), bytes84, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 76).getInt());
                                
                                lifted85 = new String(bytes84, StandardCharsets.UTF_8);
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 68).getByte()) & 0xFF)));
                        }
                        
                        ArrayList<Capability> array93 = new ArrayList<>(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 84).getInt());
                        for (int index94 = 0; index94 < (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 84).getInt()); ++index94) {
                            int base87 = (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).getInt()) + (index94 * 40);
                            
                            byte[] bytes88 = new byte[org.teavm.interop.Address.fromInt((base87) + 4).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base87) + 0).getInt()), bytes88, 0, org.teavm.interop.Address.fromInt((base87) + 4).getInt());
                            
                            byte[] bytes89 = new byte[org.teavm.interop.Address.fromInt((base87) + 12).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base87) + 8).getInt()), bytes89, 0, org.teavm.interop.Address.fromInt((base87) + 12).getInt());
                            
                            byte[] bytes90 = new byte[org.teavm.interop.Address.fromInt((base87) + 20).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base87) + 16).getInt()), bytes90, 0, org.teavm.interop.Address.fromInt((base87) + 20).getInt());
                            
                            byte[] bytes91 = new byte[org.teavm.interop.Address.fromInt((base87) + 28).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base87) + 24).getInt()), bytes91, 0, org.teavm.interop.Address.fromInt((base87) + 28).getInt());
                            
                            byte[] bytes92 = new byte[org.teavm.interop.Address.fromInt((base87) + 36).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base87) + 32).getInt()), bytes92, 0, org.teavm.interop.Address.fromInt((base87) + 36).getInt());
                            
                            array93.add(new Capability(new Address(new String(bytes88, StandardCharsets.UTF_8), new ProcessId(new String(bytes89, StandardCharsets.UTF_8), new String(bytes90, StandardCharsets.UTF_8), new String(bytes91, StandardCharsets.UTF_8))), new String(bytes92, StandardCharsets.UTF_8)));
                        }
                        Memory.free(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).getInt()), (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 84).getInt()) * 40, 4);
                        
                        byte[] lifted100;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).getByte()) & 0xFF)) {
                            case 0: {
                                lifted100 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                byte[] array99 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 96).getInt()];
                                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 92).getInt()), array99, 0, (array99).length);
                                
                                lifted100 = array99;
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).getByte()) & 0xFF)));
                        }
                        
                        lifted101 = Message.response(new wit.worlds.ProcessV0.Tuple2<Response, byte[]>(new Response(((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 56).getByte()) & 0xFF) != 0), array79, lifted85, array93), lifted100));
                        break;
                    }
                    
                    default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 48).getByte()) & 0xFF)));
                }
                
                LazyLoadBlob lifted113;
                
                switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 112).getByte()) & 0xFF)) {
                    case 0: {
                        lifted113 = null;
                        break;
                    }
                    
                    case 1: {
                        
                        String lifted111;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 116).getByte()) & 0xFF)) {
                            case 0: {
                                lifted111 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                byte[] bytes110 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 124).getInt()];
                                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 120).getInt()), bytes110, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 124).getInt());
                                
                                lifted111 = new String(bytes110, StandardCharsets.UTF_8);
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 116).getByte()) & 0xFF)));
                        }
                        
                        byte[] array112 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 132).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 128).getInt()), array112, 0, (array112).length);
                        
                        lifted113 = new LazyLoadBlob(lifted111, array112);
                        break;
                    }
                    
                    default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 112).getByte()) & 0xFF)));
                }
                
                byte[] lifted119;
                
                switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 136).getByte()) & 0xFF)) {
                    case 0: {
                        lifted119 = null;
                        break;
                    }
                    
                    case 1: {
                        
                        byte[] array118 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 144).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 140).getInt()), array118, 0, (array118).length);
                        
                        lifted119 = array118;
                        break;
                    }
                    
                    default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 136).getByte()) & 0xFF)));
                }
                
                lifted120 = wit.worlds.ProcessV0.Result.<wit.worlds.ProcessV0.Tuple2<Address, Message>, wit.worlds.ProcessV0.Tuple2<SendError, byte[]>>err(new wit.worlds.ProcessV0.Tuple2<SendError, byte[]>(new SendError(SendErrorKind.values()[(((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 8).getByte()) & 0xFF)], new Address(new String(bytes50, StandardCharsets.UTF_8), new ProcessId(new String(bytes51, StandardCharsets.UTF_8), new String(bytes52, StandardCharsets.UTF_8), new String(bytes53, StandardCharsets.UTF_8))), lifted101, lifted113), lifted119));
                break;
            }
            
            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).getByte()) & 0xFF)));
        }
        return lifted120;
        
    }
    @Import(name = "get-blob", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportGetBlob(int p0);
    
    public static LazyLoadBlob getBlob() {
        wasmImportGetBlob(wit.worlds.ProcessV0.RETURN_AREA);
        
        LazyLoadBlob lifted6;
        
        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).getByte()) & 0xFF)) {
            case 0: {
                lifted6 = null;
                break;
            }
            
            case 1: {
                
                String lifted;
                
                switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 4).getByte()) & 0xFF)) {
                    case 0: {
                        lifted = null;
                        break;
                    }
                    
                    case 1: {
                        
                        byte[] bytes = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 12).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 8).getInt()), bytes, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 12).getInt());
                        
                        lifted = new String(bytes, StandardCharsets.UTF_8);
                        break;
                    }
                    
                    default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 4).getByte()) & 0xFF)));
                }
                
                byte[] array = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 20).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 16).getInt()), array, 0, (array).length);
                
                lifted6 = new LazyLoadBlob(lifted, array);
                break;
            }
            
            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).getByte()) & 0xFF)));
        }
        return lifted6;
        
    }
    @Import(name = "send-request", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportSendRequest(int p0);
    
    public static void sendRequest(Address target, Request request, byte[] context, LazyLoadBlob lazyLoadBlob) {
        byte[] bytes = ((target).node).getBytes(StandardCharsets.UTF_8);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 4).putInt(bytes.length);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).putInt(org.teavm.interop.Address.ofData(bytes).toInt());
        byte[] bytes0 = (((target).process).processName).getBytes(StandardCharsets.UTF_8);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 12).putInt(bytes0.length);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 8).putInt(org.teavm.interop.Address.ofData(bytes0).toInt());
        byte[] bytes1 = (((target).process).packageName).getBytes(StandardCharsets.UTF_8);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 20).putInt(bytes1.length);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 16).putInt(org.teavm.interop.Address.ofData(bytes1).toInt());
        byte[] bytes2 = (((target).process).publisherNode).getBytes(StandardCharsets.UTF_8);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 28).putInt(bytes2.length);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 24).putInt(org.teavm.interop.Address.ofData(bytes2).toInt());
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 32).putByte((byte) (((request).inherit ? 1 : 0)));
        
        if (((request).expectsResponse) == null) {
            
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 40).putByte((byte) (0));
            
        } else {
            long payload5 = (long) ((request).expectsResponse);
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 40).putByte((byte) (1));
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 48).putLong(payload5);
            
        }
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 60).putInt(((request).body).length);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 56).putInt(org.teavm.interop.Address.ofData((request).body).toInt());
        
        if (((request).metadata) == null) {
            
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 64).putByte((byte) (0));
            
        } else {
            String payload11 = (String) ((request).metadata);
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 64).putByte((byte) (1));
            byte[] bytes12 = (payload11).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 72).putInt(bytes12.length);
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 68).putInt(org.teavm.interop.Address.ofData(bytes12).toInt());
            
        }
        
        int address = Memory.malloc(((request).capabilities).size() * 40, 4).toInt();
        for (int index = 0; index < ((request).capabilities).size(); ++index) {
            Capability element13 = ((request).capabilities).get(index);
            int base14 = address + (index * 40);
            byte[] bytes15 = (((element13).issuer).node).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base14) + 4).putInt(bytes15.length);
            org.teavm.interop.Address.fromInt((base14) + 0).putInt(org.teavm.interop.Address.ofData(bytes15).toInt());
            byte[] bytes16 = ((((element13).issuer).process).processName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base14) + 12).putInt(bytes16.length);
            org.teavm.interop.Address.fromInt((base14) + 8).putInt(org.teavm.interop.Address.ofData(bytes16).toInt());
            byte[] bytes17 = ((((element13).issuer).process).packageName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base14) + 20).putInt(bytes17.length);
            org.teavm.interop.Address.fromInt((base14) + 16).putInt(org.teavm.interop.Address.ofData(bytes17).toInt());
            byte[] bytes18 = ((((element13).issuer).process).publisherNode).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base14) + 28).putInt(bytes18.length);
            org.teavm.interop.Address.fromInt((base14) + 24).putInt(org.teavm.interop.Address.ofData(bytes18).toInt());
            byte[] bytes19 = ((element13).params).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base14) + 36).putInt(bytes19.length);
            org.teavm.interop.Address.fromInt((base14) + 32).putInt(org.teavm.interop.Address.ofData(bytes19).toInt());
            
        }
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).putInt(((request).capabilities).size());
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 76).putInt(address);
        
        if ((context) == null) {
            
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).putByte((byte) (0));
            
        } else {
            byte[] payload25 = (byte[]) (context);
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).putByte((byte) (1));
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 96).putInt((payload25).length);
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 92).putInt(org.teavm.interop.Address.ofData(payload25).toInt());
            
        }
        
        if ((lazyLoadBlob) == null) {
            
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 100).putByte((byte) (0));
            
        } else {
            LazyLoadBlob payload31 = (LazyLoadBlob) (lazyLoadBlob);
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 100).putByte((byte) (1));
            
            if (((payload31).mime) == null) {
                
                org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 104).putByte((byte) (0));
                
            } else {
                String payload37 = (String) ((payload31).mime);
                org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 104).putByte((byte) (1));
                byte[] bytes38 = (payload37).getBytes(StandardCharsets.UTF_8);
                org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 112).putInt(bytes38.length);
                org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 108).putInt(org.teavm.interop.Address.ofData(bytes38).toInt());
                
            }
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 120).putInt(((payload31).bytes).length);
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 116).putInt(org.teavm.interop.Address.ofData((payload31).bytes).toInt());
            
        }
        wasmImportSendRequest(wit.worlds.ProcessV0.RETURN_AREA);
        Memory.free(org.teavm.interop.Address.fromInt(address), ((request).capabilities).size() * 40, 4);
        
    }
    @Import(name = "send-requests", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportSendRequests(int p0, int p1);
    
    public static void sendRequests(ArrayList<wit.worlds.ProcessV0.Tuple4<Address, Request, byte[], LazyLoadBlob>> requests) {
        ArrayList<wit.worlds.ProcessV0.Cleanup> cleanupList = new ArrayList<>();
        
        int address41 = Memory.malloc((requests).size() * 128, 8).toInt();
        for (int index42 = 0; index42 < (requests).size(); ++index42) {
            wit.worlds.ProcessV0.Tuple4<Address, Request, byte[], LazyLoadBlob> element = (requests).get(index42);
            int base = address41 + (index42 * 128);
            byte[] bytes = (((element).f0).node).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base) + 4).putInt(bytes.length);
            org.teavm.interop.Address.fromInt((base) + 0).putInt(org.teavm.interop.Address.ofData(bytes).toInt());
            byte[] bytes0 = ((((element).f0).process).processName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base) + 12).putInt(bytes0.length);
            org.teavm.interop.Address.fromInt((base) + 8).putInt(org.teavm.interop.Address.ofData(bytes0).toInt());
            byte[] bytes1 = ((((element).f0).process).packageName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base) + 20).putInt(bytes1.length);
            org.teavm.interop.Address.fromInt((base) + 16).putInt(org.teavm.interop.Address.ofData(bytes1).toInt());
            byte[] bytes2 = ((((element).f0).process).publisherNode).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base) + 28).putInt(bytes2.length);
            org.teavm.interop.Address.fromInt((base) + 24).putInt(org.teavm.interop.Address.ofData(bytes2).toInt());
            org.teavm.interop.Address.fromInt((base) + 32).putByte((byte) ((((element).f1).inherit ? 1 : 0)));
            
            if ((((element).f1).expectsResponse) == null) {
                
                org.teavm.interop.Address.fromInt((base) + 40).putByte((byte) (0));
                
            } else {
                long payload7 = (long) (((element).f1).expectsResponse);
                org.teavm.interop.Address.fromInt((base) + 40).putByte((byte) (1));
                org.teavm.interop.Address.fromInt((base) + 48).putLong(payload7);
                
            }
            org.teavm.interop.Address.fromInt((base) + 60).putInt((((element).f1).body).length);
            org.teavm.interop.Address.fromInt((base) + 56).putInt(org.teavm.interop.Address.ofData(((element).f1).body).toInt());
            
            if ((((element).f1).metadata) == null) {
                
                org.teavm.interop.Address.fromInt((base) + 64).putByte((byte) (0));
                
            } else {
                String payload13 = (String) (((element).f1).metadata);
                org.teavm.interop.Address.fromInt((base) + 64).putByte((byte) (1));
                byte[] bytes14 = (payload13).getBytes(StandardCharsets.UTF_8);
                org.teavm.interop.Address.fromInt((base) + 72).putInt(bytes14.length);
                org.teavm.interop.Address.fromInt((base) + 68).putInt(org.teavm.interop.Address.ofData(bytes14).toInt());
                
            }
            
            int address = Memory.malloc((((element).f1).capabilities).size() * 40, 4).toInt();
            for (int index = 0; index < (((element).f1).capabilities).size(); ++index) {
                Capability element15 = (((element).f1).capabilities).get(index);
                int base16 = address + (index * 40);
                byte[] bytes17 = (((element15).issuer).node).getBytes(StandardCharsets.UTF_8);
                org.teavm.interop.Address.fromInt((base16) + 4).putInt(bytes17.length);
                org.teavm.interop.Address.fromInt((base16) + 0).putInt(org.teavm.interop.Address.ofData(bytes17).toInt());
                byte[] bytes18 = ((((element15).issuer).process).processName).getBytes(StandardCharsets.UTF_8);
                org.teavm.interop.Address.fromInt((base16) + 12).putInt(bytes18.length);
                org.teavm.interop.Address.fromInt((base16) + 8).putInt(org.teavm.interop.Address.ofData(bytes18).toInt());
                byte[] bytes19 = ((((element15).issuer).process).packageName).getBytes(StandardCharsets.UTF_8);
                org.teavm.interop.Address.fromInt((base16) + 20).putInt(bytes19.length);
                org.teavm.interop.Address.fromInt((base16) + 16).putInt(org.teavm.interop.Address.ofData(bytes19).toInt());
                byte[] bytes20 = ((((element15).issuer).process).publisherNode).getBytes(StandardCharsets.UTF_8);
                org.teavm.interop.Address.fromInt((base16) + 28).putInt(bytes20.length);
                org.teavm.interop.Address.fromInt((base16) + 24).putInt(org.teavm.interop.Address.ofData(bytes20).toInt());
                byte[] bytes21 = ((element15).params).getBytes(StandardCharsets.UTF_8);
                org.teavm.interop.Address.fromInt((base16) + 36).putInt(bytes21.length);
                org.teavm.interop.Address.fromInt((base16) + 32).putInt(org.teavm.interop.Address.ofData(bytes21).toInt());
                
            }
            org.teavm.interop.Address.fromInt((base) + 80).putInt((((element).f1).capabilities).size());
            org.teavm.interop.Address.fromInt((base) + 76).putInt(address);
            
            if (((element).f2) == null) {
                
                org.teavm.interop.Address.fromInt((base) + 88).putByte((byte) (0));
                
            } else {
                byte[] payload27 = (byte[]) ((element).f2);
                org.teavm.interop.Address.fromInt((base) + 88).putByte((byte) (1));
                org.teavm.interop.Address.fromInt((base) + 96).putInt((payload27).length);
                org.teavm.interop.Address.fromInt((base) + 92).putInt(org.teavm.interop.Address.ofData(payload27).toInt());
                
            }
            
            if (((element).f3) == null) {
                
                org.teavm.interop.Address.fromInt((base) + 100).putByte((byte) (0));
                
            } else {
                LazyLoadBlob payload33 = (LazyLoadBlob) ((element).f3);
                org.teavm.interop.Address.fromInt((base) + 100).putByte((byte) (1));
                
                if (((payload33).mime) == null) {
                    
                    org.teavm.interop.Address.fromInt((base) + 104).putByte((byte) (0));
                    
                } else {
                    String payload39 = (String) ((payload33).mime);
                    org.teavm.interop.Address.fromInt((base) + 104).putByte((byte) (1));
                    byte[] bytes40 = (payload39).getBytes(StandardCharsets.UTF_8);
                    org.teavm.interop.Address.fromInt((base) + 112).putInt(bytes40.length);
                    org.teavm.interop.Address.fromInt((base) + 108).putInt(org.teavm.interop.Address.ofData(bytes40).toInt());
                    
                }
                org.teavm.interop.Address.fromInt((base) + 120).putInt(((payload33).bytes).length);
                org.teavm.interop.Address.fromInt((base) + 116).putInt(org.teavm.interop.Address.ofData((payload33).bytes).toInt());
                
            }
            cleanupList.add(new wit.worlds.ProcessV0.Cleanup(address, (((element).f1).capabilities).size() * 40, 4));
            
        }
        wasmImportSendRequests(address41, (requests).size());
        Memory.free(org.teavm.interop.Address.fromInt(address41), (requests).size() * 128, 8);
        
        for (wit.worlds.ProcessV0.Cleanup cleanup : cleanupList) {
            Memory.free(org.teavm.interop.Address.fromInt(cleanup.address), cleanup.size, cleanup.align);
        }
        
    }
    @Import(name = "send-response", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportSendResponse(int p0, int p1, int p2, int p3, int p4, int p5, int p6, int p7, int p8, int p9, int p10, int p11, int p12, int p13);
    
    public static void sendResponse(Response response, LazyLoadBlob lazyLoadBlob) {
        
        int lowered;
        int lowered3;
        int lowered4;
        
        if (((response).metadata) == null) {
            
            lowered = 0;
            lowered3 = 0;
            lowered4 = 0;
            
        } else {
            String payload2 = (String) ((response).metadata);
            byte[] bytes = (payload2).getBytes(StandardCharsets.UTF_8);
            
            lowered = 1;
            lowered3 = org.teavm.interop.Address.ofData(bytes).toInt();
            lowered4 = bytes.length;
            
        }
        
        int address = Memory.malloc(((response).capabilities).size() * 40, 4).toInt();
        for (int index = 0; index < ((response).capabilities).size(); ++index) {
            Capability element5 = ((response).capabilities).get(index);
            int base6 = address + (index * 40);
            byte[] bytes7 = (((element5).issuer).node).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base6) + 4).putInt(bytes7.length);
            org.teavm.interop.Address.fromInt((base6) + 0).putInt(org.teavm.interop.Address.ofData(bytes7).toInt());
            byte[] bytes8 = ((((element5).issuer).process).processName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base6) + 12).putInt(bytes8.length);
            org.teavm.interop.Address.fromInt((base6) + 8).putInt(org.teavm.interop.Address.ofData(bytes8).toInt());
            byte[] bytes9 = ((((element5).issuer).process).packageName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base6) + 20).putInt(bytes9.length);
            org.teavm.interop.Address.fromInt((base6) + 16).putInt(org.teavm.interop.Address.ofData(bytes9).toInt());
            byte[] bytes10 = ((((element5).issuer).process).publisherNode).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base6) + 28).putInt(bytes10.length);
            org.teavm.interop.Address.fromInt((base6) + 24).putInt(org.teavm.interop.Address.ofData(bytes10).toInt());
            byte[] bytes11 = ((element5).params).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base6) + 36).putInt(bytes11.length);
            org.teavm.interop.Address.fromInt((base6) + 32).putInt(org.teavm.interop.Address.ofData(bytes11).toInt());
            
        }
        
        int lowered28;
        int lowered29;
        int lowered30;
        int lowered31;
        int lowered32;
        int lowered33;
        
        if ((lazyLoadBlob) == null) {
            
            lowered28 = 0;
            lowered29 = 0;
            lowered30 = 0;
            lowered31 = 0;
            lowered32 = 0;
            lowered33 = 0;
            
        } else {
            LazyLoadBlob payload17 = (LazyLoadBlob) (lazyLoadBlob);
            
            int lowered25;
            int lowered26;
            int lowered27;
            
            if (((payload17).mime) == null) {
                
                lowered25 = 0;
                lowered26 = 0;
                lowered27 = 0;
                
            } else {
                String payload23 = (String) ((payload17).mime);
                byte[] bytes24 = (payload23).getBytes(StandardCharsets.UTF_8);
                
                lowered25 = 1;
                lowered26 = org.teavm.interop.Address.ofData(bytes24).toInt();
                lowered27 = bytes24.length;
                
            }
            
            lowered28 = 1;
            lowered29 = lowered25;
            lowered30 = lowered26;
            lowered31 = lowered27;
            lowered32 = org.teavm.interop.Address.ofData((payload17).bytes).toInt();
            lowered33 = ((payload17).bytes).length;
            
        }
        wasmImportSendResponse(((response).inherit ? 1 : 0), org.teavm.interop.Address.ofData((response).body).toInt(), ((response).body).length, lowered, lowered3, lowered4, address, ((response).capabilities).size(), lowered28, lowered29, lowered30, lowered31, lowered32, lowered33);
        Memory.free(org.teavm.interop.Address.fromInt(address), ((response).capabilities).size() * 40, 4);
        
    }
    @Import(name = "send-and-await-response", module = "kinode:process/standard@0.8.0")
    private static native void wasmImportSendAndAwaitResponse(int p0, int p1);
    
    public static wit.worlds.ProcessV0.Result<wit.worlds.ProcessV0.Tuple2<Address, Message>, SendError> sendAndAwaitResponse(Address target, Request request, LazyLoadBlob lazyLoadBlob) {
        byte[] bytes = ((target).node).getBytes(StandardCharsets.UTF_8);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 4).putInt(bytes.length);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).putInt(org.teavm.interop.Address.ofData(bytes).toInt());
        byte[] bytes0 = (((target).process).processName).getBytes(StandardCharsets.UTF_8);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 12).putInt(bytes0.length);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 8).putInt(org.teavm.interop.Address.ofData(bytes0).toInt());
        byte[] bytes1 = (((target).process).packageName).getBytes(StandardCharsets.UTF_8);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 20).putInt(bytes1.length);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 16).putInt(org.teavm.interop.Address.ofData(bytes1).toInt());
        byte[] bytes2 = (((target).process).publisherNode).getBytes(StandardCharsets.UTF_8);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 28).putInt(bytes2.length);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 24).putInt(org.teavm.interop.Address.ofData(bytes2).toInt());
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 32).putByte((byte) (((request).inherit ? 1 : 0)));
        
        if (((request).expectsResponse) == null) {
            
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 40).putByte((byte) (0));
            
        } else {
            long payload5 = (long) ((request).expectsResponse);
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 40).putByte((byte) (1));
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 48).putLong(payload5);
            
        }
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 60).putInt(((request).body).length);
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 56).putInt(org.teavm.interop.Address.ofData((request).body).toInt());
        
        if (((request).metadata) == null) {
            
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 64).putByte((byte) (0));
            
        } else {
            String payload11 = (String) ((request).metadata);
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 64).putByte((byte) (1));
            byte[] bytes12 = (payload11).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 72).putInt(bytes12.length);
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 68).putInt(org.teavm.interop.Address.ofData(bytes12).toInt());
            
        }
        
        int address = Memory.malloc(((request).capabilities).size() * 40, 4).toInt();
        for (int index = 0; index < ((request).capabilities).size(); ++index) {
            Capability element13 = ((request).capabilities).get(index);
            int base14 = address + (index * 40);
            byte[] bytes15 = (((element13).issuer).node).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base14) + 4).putInt(bytes15.length);
            org.teavm.interop.Address.fromInt((base14) + 0).putInt(org.teavm.interop.Address.ofData(bytes15).toInt());
            byte[] bytes16 = ((((element13).issuer).process).processName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base14) + 12).putInt(bytes16.length);
            org.teavm.interop.Address.fromInt((base14) + 8).putInt(org.teavm.interop.Address.ofData(bytes16).toInt());
            byte[] bytes17 = ((((element13).issuer).process).packageName).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base14) + 20).putInt(bytes17.length);
            org.teavm.interop.Address.fromInt((base14) + 16).putInt(org.teavm.interop.Address.ofData(bytes17).toInt());
            byte[] bytes18 = ((((element13).issuer).process).publisherNode).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base14) + 28).putInt(bytes18.length);
            org.teavm.interop.Address.fromInt((base14) + 24).putInt(org.teavm.interop.Address.ofData(bytes18).toInt());
            byte[] bytes19 = ((element13).params).getBytes(StandardCharsets.UTF_8);
            org.teavm.interop.Address.fromInt((base14) + 36).putInt(bytes19.length);
            org.teavm.interop.Address.fromInt((base14) + 32).putInt(org.teavm.interop.Address.ofData(bytes19).toInt());
            
        }
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).putInt(((request).capabilities).size());
        org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 76).putInt(address);
        
        if ((lazyLoadBlob) == null) {
            
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).putByte((byte) (0));
            
        } else {
            LazyLoadBlob payload25 = (LazyLoadBlob) (lazyLoadBlob);
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).putByte((byte) (1));
            
            if (((payload25).mime) == null) {
                
                org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 92).putByte((byte) (0));
                
            } else {
                String payload31 = (String) ((payload25).mime);
                org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 92).putByte((byte) (1));
                byte[] bytes32 = (payload31).getBytes(StandardCharsets.UTF_8);
                org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 100).putInt(bytes32.length);
                org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 96).putInt(org.teavm.interop.Address.ofData(bytes32).toInt());
                
            }
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 108).putInt(((payload25).bytes).length);
            org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 104).putInt(org.teavm.interop.Address.ofData((payload25).bytes).toInt());
            
        }
        wasmImportSendAndAwaitResponse(wit.worlds.ProcessV0.RETURN_AREA, wit.worlds.ProcessV0.RETURN_AREA);
        
        wit.worlds.ProcessV0.Result<wit.worlds.ProcessV0.Tuple2<Address, Message>, SendError> lifted151;
        
        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).getByte()) & 0xFF)) {
            case 0: {
                
                byte[] bytes35 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 12).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 8).getInt()), bytes35, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 12).getInt());
                
                byte[] bytes36 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 20).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 16).getInt()), bytes36, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 20).getInt());
                
                byte[] bytes37 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 28).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 24).getInt()), bytes37, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 28).getInt());
                
                byte[] bytes38 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 36).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 32).getInt()), bytes38, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 36).getInt());
                
                Message lifted84;
                
                switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 40).getByte()) & 0xFF)) {
                    case 0: {
                        
                        Long lifted;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 56).getByte()) & 0xFF)) {
                            case 0: {
                                lifted = null;
                                break;
                            }
                            
                            case 1: {
                                
                                lifted = org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 64).getLong();
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 56).getByte()) & 0xFF)));
                        }
                        
                        byte[] array = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 76).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 72).getInt()), array, 0, (array).length);
                        
                        String lifted50;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).getByte()) & 0xFF)) {
                            case 0: {
                                lifted50 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                byte[] bytes49 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).getInt()];
                                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 84).getInt()), bytes49, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).getInt());
                                
                                lifted50 = new String(bytes49, StandardCharsets.UTF_8);
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).getByte()) & 0xFF)));
                        }
                        
                        ArrayList<Capability> array58 = new ArrayList<>(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 96).getInt());
                        for (int index59 = 0; index59 < (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 96).getInt()); ++index59) {
                            int base52 = (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 92).getInt()) + (index59 * 40);
                            
                            byte[] bytes53 = new byte[org.teavm.interop.Address.fromInt((base52) + 4).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base52) + 0).getInt()), bytes53, 0, org.teavm.interop.Address.fromInt((base52) + 4).getInt());
                            
                            byte[] bytes54 = new byte[org.teavm.interop.Address.fromInt((base52) + 12).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base52) + 8).getInt()), bytes54, 0, org.teavm.interop.Address.fromInt((base52) + 12).getInt());
                            
                            byte[] bytes55 = new byte[org.teavm.interop.Address.fromInt((base52) + 20).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base52) + 16).getInt()), bytes55, 0, org.teavm.interop.Address.fromInt((base52) + 20).getInt());
                            
                            byte[] bytes56 = new byte[org.teavm.interop.Address.fromInt((base52) + 28).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base52) + 24).getInt()), bytes56, 0, org.teavm.interop.Address.fromInt((base52) + 28).getInt());
                            
                            byte[] bytes57 = new byte[org.teavm.interop.Address.fromInt((base52) + 36).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base52) + 32).getInt()), bytes57, 0, org.teavm.interop.Address.fromInt((base52) + 36).getInt());
                            
                            array58.add(new Capability(new Address(new String(bytes53, StandardCharsets.UTF_8), new ProcessId(new String(bytes54, StandardCharsets.UTF_8), new String(bytes55, StandardCharsets.UTF_8), new String(bytes56, StandardCharsets.UTF_8))), new String(bytes57, StandardCharsets.UTF_8)));
                        }
                        Memory.free(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 92).getInt()), (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 96).getInt()) * 40, 4);
                        
                        lifted84 = Message.request(new Request(((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 48).getByte()) & 0xFF) != 0), lifted, array, lifted50, array58));
                        break;
                    }
                    case 1: {
                        
                        byte[] array62 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 56).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 52).getInt()), array62, 0, (array62).length);
                        
                        String lifted68;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 60).getByte()) & 0xFF)) {
                            case 0: {
                                lifted68 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                byte[] bytes67 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 68).getInt()];
                                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 64).getInt()), bytes67, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 68).getInt());
                                
                                lifted68 = new String(bytes67, StandardCharsets.UTF_8);
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 60).getByte()) & 0xFF)));
                        }
                        
                        ArrayList<Capability> array76 = new ArrayList<>(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 76).getInt());
                        for (int index77 = 0; index77 < (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 76).getInt()); ++index77) {
                            int base70 = (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 72).getInt()) + (index77 * 40);
                            
                            byte[] bytes71 = new byte[org.teavm.interop.Address.fromInt((base70) + 4).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base70) + 0).getInt()), bytes71, 0, org.teavm.interop.Address.fromInt((base70) + 4).getInt());
                            
                            byte[] bytes72 = new byte[org.teavm.interop.Address.fromInt((base70) + 12).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base70) + 8).getInt()), bytes72, 0, org.teavm.interop.Address.fromInt((base70) + 12).getInt());
                            
                            byte[] bytes73 = new byte[org.teavm.interop.Address.fromInt((base70) + 20).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base70) + 16).getInt()), bytes73, 0, org.teavm.interop.Address.fromInt((base70) + 20).getInt());
                            
                            byte[] bytes74 = new byte[org.teavm.interop.Address.fromInt((base70) + 28).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base70) + 24).getInt()), bytes74, 0, org.teavm.interop.Address.fromInt((base70) + 28).getInt());
                            
                            byte[] bytes75 = new byte[org.teavm.interop.Address.fromInt((base70) + 36).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base70) + 32).getInt()), bytes75, 0, org.teavm.interop.Address.fromInt((base70) + 36).getInt());
                            
                            array76.add(new Capability(new Address(new String(bytes71, StandardCharsets.UTF_8), new ProcessId(new String(bytes72, StandardCharsets.UTF_8), new String(bytes73, StandardCharsets.UTF_8), new String(bytes74, StandardCharsets.UTF_8))), new String(bytes75, StandardCharsets.UTF_8)));
                        }
                        Memory.free(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 72).getInt()), (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 76).getInt()) * 40, 4);
                        
                        byte[] lifted83;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).getByte()) & 0xFF)) {
                            case 0: {
                                lifted83 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                byte[] array82 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).getInt()];
                                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 84).getInt()), array82, 0, (array82).length);
                                
                                lifted83 = array82;
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).getByte()) & 0xFF)));
                        }
                        
                        lifted84 = Message.response(new wit.worlds.ProcessV0.Tuple2<Response, byte[]>(new Response(((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 48).getByte()) & 0xFF) != 0), array62, lifted68, array76), lifted83));
                        break;
                    }
                    
                    default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 40).getByte()) & 0xFF)));
                }
                
                lifted151 = wit.worlds.ProcessV0.Result.<wit.worlds.ProcessV0.Tuple2<Address, Message>, SendError>ok(new wit.worlds.ProcessV0.Tuple2<Address, Message>(new Address(new String(bytes35, StandardCharsets.UTF_8), new ProcessId(new String(bytes36, StandardCharsets.UTF_8), new String(bytes37, StandardCharsets.UTF_8), new String(bytes38, StandardCharsets.UTF_8))), lifted84));
                break;
            }
            case 1: {
                
                byte[] bytes87 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 16).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 12).getInt()), bytes87, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 16).getInt());
                
                byte[] bytes88 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 24).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 20).getInt()), bytes88, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 24).getInt());
                
                byte[] bytes89 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 32).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 28).getInt()), bytes89, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 32).getInt());
                
                byte[] bytes90 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 40).getInt()];
                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 36).getInt()), bytes90, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 40).getInt());
                
                Message lifted138;
                
                switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 48).getByte()) & 0xFF)) {
                    case 0: {
                        
                        Long lifted97;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 64).getByte()) & 0xFF)) {
                            case 0: {
                                lifted97 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                lifted97 = org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 72).getLong();
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 64).getByte()) & 0xFF)));
                        }
                        
                        byte[] array98 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 84).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).getInt()), array98, 0, (array98).length);
                        
                        String lifted104;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).getByte()) & 0xFF)) {
                            case 0: {
                                lifted104 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                byte[] bytes103 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 96).getInt()];
                                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 92).getInt()), bytes103, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 96).getInt());
                                
                                lifted104 = new String(bytes103, StandardCharsets.UTF_8);
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).getByte()) & 0xFF)));
                        }
                        
                        ArrayList<Capability> array112 = new ArrayList<>(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 104).getInt());
                        for (int index113 = 0; index113 < (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 104).getInt()); ++index113) {
                            int base106 = (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 100).getInt()) + (index113 * 40);
                            
                            byte[] bytes107 = new byte[org.teavm.interop.Address.fromInt((base106) + 4).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base106) + 0).getInt()), bytes107, 0, org.teavm.interop.Address.fromInt((base106) + 4).getInt());
                            
                            byte[] bytes108 = new byte[org.teavm.interop.Address.fromInt((base106) + 12).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base106) + 8).getInt()), bytes108, 0, org.teavm.interop.Address.fromInt((base106) + 12).getInt());
                            
                            byte[] bytes109 = new byte[org.teavm.interop.Address.fromInt((base106) + 20).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base106) + 16).getInt()), bytes109, 0, org.teavm.interop.Address.fromInt((base106) + 20).getInt());
                            
                            byte[] bytes110 = new byte[org.teavm.interop.Address.fromInt((base106) + 28).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base106) + 24).getInt()), bytes110, 0, org.teavm.interop.Address.fromInt((base106) + 28).getInt());
                            
                            byte[] bytes111 = new byte[org.teavm.interop.Address.fromInt((base106) + 36).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base106) + 32).getInt()), bytes111, 0, org.teavm.interop.Address.fromInt((base106) + 36).getInt());
                            
                            array112.add(new Capability(new Address(new String(bytes107, StandardCharsets.UTF_8), new ProcessId(new String(bytes108, StandardCharsets.UTF_8), new String(bytes109, StandardCharsets.UTF_8), new String(bytes110, StandardCharsets.UTF_8))), new String(bytes111, StandardCharsets.UTF_8)));
                        }
                        Memory.free(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 100).getInt()), (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 104).getInt()) * 40, 4);
                        
                        lifted138 = Message.request(new Request(((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 56).getByte()) & 0xFF) != 0), lifted97, array98, lifted104, array112));
                        break;
                    }
                    case 1: {
                        
                        byte[] array116 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 64).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 60).getInt()), array116, 0, (array116).length);
                        
                        String lifted122;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 68).getByte()) & 0xFF)) {
                            case 0: {
                                lifted122 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                byte[] bytes121 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 76).getInt()];
                                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 72).getInt()), bytes121, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 76).getInt());
                                
                                lifted122 = new String(bytes121, StandardCharsets.UTF_8);
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 68).getByte()) & 0xFF)));
                        }
                        
                        ArrayList<Capability> array130 = new ArrayList<>(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 84).getInt());
                        for (int index131 = 0; index131 < (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 84).getInt()); ++index131) {
                            int base124 = (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).getInt()) + (index131 * 40);
                            
                            byte[] bytes125 = new byte[org.teavm.interop.Address.fromInt((base124) + 4).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base124) + 0).getInt()), bytes125, 0, org.teavm.interop.Address.fromInt((base124) + 4).getInt());
                            
                            byte[] bytes126 = new byte[org.teavm.interop.Address.fromInt((base124) + 12).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base124) + 8).getInt()), bytes126, 0, org.teavm.interop.Address.fromInt((base124) + 12).getInt());
                            
                            byte[] bytes127 = new byte[org.teavm.interop.Address.fromInt((base124) + 20).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base124) + 16).getInt()), bytes127, 0, org.teavm.interop.Address.fromInt((base124) + 20).getInt());
                            
                            byte[] bytes128 = new byte[org.teavm.interop.Address.fromInt((base124) + 28).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base124) + 24).getInt()), bytes128, 0, org.teavm.interop.Address.fromInt((base124) + 28).getInt());
                            
                            byte[] bytes129 = new byte[org.teavm.interop.Address.fromInt((base124) + 36).getInt()];
                            Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((base124) + 32).getInt()), bytes129, 0, org.teavm.interop.Address.fromInt((base124) + 36).getInt());
                            
                            array130.add(new Capability(new Address(new String(bytes125, StandardCharsets.UTF_8), new ProcessId(new String(bytes126, StandardCharsets.UTF_8), new String(bytes127, StandardCharsets.UTF_8), new String(bytes128, StandardCharsets.UTF_8))), new String(bytes129, StandardCharsets.UTF_8)));
                        }
                        Memory.free(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 80).getInt()), (org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 84).getInt()) * 40, 4);
                        
                        byte[] lifted137;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).getByte()) & 0xFF)) {
                            case 0: {
                                lifted137 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                byte[] array136 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 96).getInt()];
                                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 92).getInt()), array136, 0, (array136).length);
                                
                                lifted137 = array136;
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 88).getByte()) & 0xFF)));
                        }
                        
                        lifted138 = Message.response(new wit.worlds.ProcessV0.Tuple2<Response, byte[]>(new Response(((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 56).getByte()) & 0xFF) != 0), array116, lifted122, array130), lifted137));
                        break;
                    }
                    
                    default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 48).getByte()) & 0xFF)));
                }
                
                LazyLoadBlob lifted150;
                
                switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 112).getByte()) & 0xFF)) {
                    case 0: {
                        lifted150 = null;
                        break;
                    }
                    
                    case 1: {
                        
                        String lifted148;
                        
                        switch ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 116).getByte()) & 0xFF)) {
                            case 0: {
                                lifted148 = null;
                                break;
                            }
                            
                            case 1: {
                                
                                byte[] bytes147 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 124).getInt()];
                                Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 120).getInt()), bytes147, 0, org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 124).getInt());
                                
                                lifted148 = new String(bytes147, StandardCharsets.UTF_8);
                                break;
                            }
                            
                            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 116).getByte()) & 0xFF)));
                        }
                        
                        byte[] array149 = new byte[org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 132).getInt()];
                        Memory.getBytes(org.teavm.interop.Address.fromInt(org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 128).getInt()), array149, 0, (array149).length);
                        
                        lifted150 = new LazyLoadBlob(lifted148, array149);
                        break;
                    }
                    
                    default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 112).getByte()) & 0xFF)));
                }
                
                lifted151 = wit.worlds.ProcessV0.Result.<wit.worlds.ProcessV0.Tuple2<Address, Message>, SendError>err(new SendError(SendErrorKind.values()[(((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 8).getByte()) & 0xFF)], new Address(new String(bytes87, StandardCharsets.UTF_8), new ProcessId(new String(bytes88, StandardCharsets.UTF_8), new String(bytes89, StandardCharsets.UTF_8), new String(bytes90, StandardCharsets.UTF_8))), lifted138, lifted150));
                break;
            }
            
            default: throw new AssertionError("invalid discriminant: " + ((((int) org.teavm.interop.Address.fromInt((wit.worlds.ProcessV0.RETURN_AREA) + 0).getByte()) & 0xFF)));
        }
        Memory.free(org.teavm.interop.Address.fromInt(address), ((request).capabilities).size() * 40, 4);
        return lifted151;
        
    }
    
}

